use super::Cpu;

#[derive(Debug)]
pub struct Disasm(pub &'static str, pub usize);

pub const DISASM: [Disasm; 0x200] = [
    // === UNPREFIXED ===
    // 0x0
    Disasm("nop", 1),
    Disasm("ld bc, d16", 3),
    Disasm("ld (bc), %a", 1),
    Disasm("inc bc", 1),
    Disasm("inc b", 1),
    Disasm("dec b", 1),
    Disasm("ld b, d8", 2),
    Disasm("rlca", 1),
    Disasm("ld (a16), %sp", 3),
    Disasm("add hl, %bc", 1),
    // 0xa
    Disasm("ld a, (%bc)", 1),
    Disasm("dec bc", 1),
    Disasm("inc c", 1),
    Disasm("dec c", 1),
    Disasm("ld c, d8", 2),
    Disasm("rrca", 1),
    Disasm("stop 0", 1),
    Disasm("ld de, d16", 3),
    Disasm("ld (de), %a", 1),
    Disasm("inc de", 1),
    // 0x14
    Disasm("inc d", 1),
    Disasm("dec d", 1),
    Disasm("ld d, d8", 2),
    Disasm("rla", 1),
    Disasm("jr r8", 2),
    Disasm("add hl, %de", 1),
    Disasm("ld a, (%de)", 1),
    Disasm("dec de", 1),
    Disasm("inc e", 1),
    Disasm("dec e", 1),
    // 0x1e
    Disasm("ld e, d8", 2),
    Disasm("rra", 1),
    Disasm("jr nz, r8", 2),
    Disasm("ld hl, d16", 3),
    Disasm("ld (hl+), %a", 1),
    Disasm("inc hl", 1),
    Disasm("inc h", 1),
    Disasm("dec h", 1),
    Disasm("ld h, d8", 2),
    Disasm("daa", 1),
    // 0x28
    Disasm("jr z, r8", 2),
    Disasm("add hl, %hl", 1),
    Disasm("ld a, (%hl+)", 1),
    Disasm("dec hl", 1),
    Disasm("inc l", 1),
    Disasm("dec l", 1),
    Disasm("ld l, d8", 2),
    Disasm("cpl", 1),
    Disasm("jr nc, r8", 2),
    Disasm("ld sp, d16", 3),
    // 0x32
    Disasm("ld (hl-), %a", 1),
    Disasm("inc sp", 1),
    Disasm("inc (hl)", 1),
    Disasm("dec (hl)", 1),
    Disasm("ld (hl), d8", 2),
    Disasm("scf", 1),
    Disasm("jr c, r8", 2),
    Disasm("add hl, %sp", 1),
    Disasm("ld a, (hl-)", 1),
    Disasm("dec sp", 1),
    // 0x3c
    Disasm("inc a", 1),
    Disasm("dec a", 1),
    Disasm("ld a, d8", 2),
    Disasm("ccf", 1),
    Disasm("ld b, %b", 1),
    Disasm("ld b, %c", 1),
    Disasm("ld b, %d", 1),
    Disasm("ld b, %e", 1),
    Disasm("ld b, %h", 1),
    Disasm("ld b, %l", 1),
    // 0x46
    Disasm("ld b, (%hl)", 1),
    Disasm("ld b, %a", 1),
    Disasm("ld c, %b", 1),
    Disasm("ld c, %c", 1),
    Disasm("ld c, %d", 1),
    Disasm("ld c, %e", 1),
    Disasm("ld c, %h", 1),
    Disasm("ld c, %l", 1),
    Disasm("ld c, (%hl)", 1),
    Disasm("ld c, %a", 1),
    // 0x50
    Disasm("ld d, %b", 1),
    Disasm("ld d, %c", 1),
    Disasm("ld d, %d", 1),
    Disasm("ld d, %e", 1),
    Disasm("ld d, %h", 1),
    Disasm("ld d, %l", 1),
    Disasm("ld d, (%hl)", 1),
    Disasm("ld d, %a", 1),
    Disasm("ld e, %b", 1),
    Disasm("ld e, %c", 1),
    // 0x5a
    Disasm("ld e, %d", 1),
    Disasm("ld e, %e", 1),
    Disasm("ld e, %h", 1),
    Disasm("ld e, %l", 1),
    Disasm("ld e, (%hl)", 1),
    Disasm("ld e, %a", 1),
    Disasm("ld h, %b", 1),
    Disasm("ld h, %c", 1),
    Disasm("ld h, %d", 1),
    Disasm("ld h, %e", 1),
    // 0x64
    Disasm("ld h, %h", 1),
    Disasm("ld h, %l", 1),
    Disasm("ld h, (%hl)", 1),
    Disasm("ld h, %a", 1),
    Disasm("ld l, %b", 1),
    Disasm("ld l, %c", 1),
    Disasm("ld l, %d", 1),
    Disasm("ld l, %e", 1),
    Disasm("ld l, %h", 1),
    Disasm("ld l, %l", 1),
    // 0x6e
    Disasm("ld l, (%hl)", 1),
    Disasm("ld l, %a", 1),
    Disasm("ld (hl), %b", 1),
    Disasm("ld (hl), %c", 1),
    Disasm("ld (hl), %d", 1),
    Disasm("ld (hl), %e", 1),
    Disasm("ld (hl), %h", 1),
    Disasm("ld (hl), %l", 1),
    Disasm("halt", 1),
    Disasm("ld (hl), %a", 1),
    // 0x78
    Disasm("ld a, %b", 1),
    Disasm("ld a, %c", 1),
    Disasm("ld a, %d", 1),
    Disasm("ld a, %e", 1),
    Disasm("ld a, %h", 1),
    Disasm("ld a, %l", 1),
    Disasm("ld a, (%hl)", 1),
    Disasm("ld a, %a", 1),
    Disasm("add a, %b", 1),
    Disasm("add a, %c", 1),
    // 0x82
    Disasm("add a, %d", 1),
    Disasm("add a, %e", 1),
    Disasm("add a, %h", 1),
    Disasm("add a, %l", 1),
    Disasm("add a, (%hl)", 1),
    Disasm("add a, %a", 1),
    Disasm("adc a, %b", 1),
    Disasm("adc a, %c", 1),
    Disasm("adc a, %d", 1),
    Disasm("adc a, %e", 1),
    // 0x8c
    Disasm("adc a, %h", 1),
    Disasm("adc a, %l", 1),
    Disasm("adc a, (%hl)", 1),
    Disasm("adc a, %a", 1),
    Disasm("sub b", 1),
    Disasm("sub c", 1),
    Disasm("sub d", 1),
    Disasm("sub e", 1),
    Disasm("sub h", 1),
    Disasm("sub l", 1),
    // 0x96
    Disasm("sub (hl)", 1),
    Disasm("sub a", 1),
    Disasm("sbc a, %b", 1),
    Disasm("sbc a, %c", 1),
    Disasm("sbc a, %d", 1),
    Disasm("sbc a, %e", 1),
    Disasm("sbc a, %h", 1),
    Disasm("sbc a, %l", 1),
    Disasm("sbc a, (%hl)", 1),
    Disasm("sbc a, %a", 1),
    // 0xa0
    Disasm("and b", 1),
    Disasm("and c", 1),
    Disasm("and d", 1),
    Disasm("and e", 1),
    Disasm("and h", 1),
    Disasm("and l", 1),
    Disasm("and (hl)", 1),
    Disasm("and a", 1),
    Disasm("xor b", 1),
    Disasm("xor c", 1),
    // 0xaa
    Disasm("xor d", 1),
    Disasm("xor e", 1),
    Disasm("xor h", 1),
    Disasm("xor l", 1),
    Disasm("xor (hl)", 1),
    Disasm("xor a", 1),
    Disasm("or b", 1),
    Disasm("or c", 1),
    Disasm("or d", 1),
    Disasm("or e", 1),
    // 0xb4
    Disasm("or h", 1),
    Disasm("or l", 1),
    Disasm("or (hl)", 1),
    Disasm("or a", 1),
    Disasm("cp b", 1),
    Disasm("cp c", 1),
    Disasm("cp d", 1),
    Disasm("cp e", 1),
    Disasm("cp h", 1),
    Disasm("cp l", 1),
    // 0xbe
    Disasm("cp (hl)", 1),
    Disasm("cp a", 1),
    Disasm("ret nz", 1),
    Disasm("pop bc", 1),
    Disasm("jp nz, a16", 3),
    Disasm("jp a16", 3),
    Disasm("call nz, a16", 3),
    Disasm("push bc", 1),
    Disasm("add a, d8", 2),
    Disasm("rst 00h", 1),
    // 0xc8
    Disasm("ret z", 1),
    Disasm("ret", 1),
    Disasm("jp z, a16", 3),
    Disasm("prefix cb", 2),
    Disasm("call z, a16", 3),
    Disasm("call a16", 3),
    Disasm("adc a, d8", 2),
    Disasm("rst 08h", 1),
    Disasm("ret nc", 1),
    Disasm("pop de", 1),
    // 0xd2
    Disasm("jp nc, a16", 3),
    Disasm("#ud", 1),
    Disasm("call nc, a16", 3),
    Disasm("push de", 1),
    Disasm("sub d8", 2),
    Disasm("rst 10h", 1),
    Disasm("ret c", 1),
    Disasm("reti", 1),
    Disasm("jp c, a16", 3),
    Disasm("#ud", 1),
    // 0xdc
    Disasm("call c, a16", 3),
    Disasm("#ud", 1),
    Disasm("sbc a, d8", 2),
    Disasm("rst 18h", 1),
    Disasm("ldh (a8), %a", 2),
    Disasm("pop hl", 1),
    Disasm("ld (c), %a", 1),
    Disasm("#ud", 1),
    Disasm("#ud", 1),
    Disasm("push hl", 1),
    // 0xe6
    Disasm("and d8", 2),
    Disasm("rst 20h", 1),
    Disasm("add sp, r8", 2),
    Disasm("jp (hl)", 1),
    Disasm("ld (a16), %a", 3),
    Disasm("#ud", 1),
    Disasm("#ud", 1),
    Disasm("#ud", 1),
    Disasm("xor d8", 2),
    Disasm("rst 28h", 1),
    // 0xf0
    Disasm("ldh a, (a8)", 2),
    Disasm("pop af", 1),
    Disasm("ld a, (%c)", 1),
    Disasm("di", 1),
    Disasm("#ud", 1),
    Disasm("push af", 1),
    Disasm("or d8", 2),
    Disasm("rst 30h", 1),
    Disasm("ld hl, %sp+r8", 2),
    Disasm("ld sp, %hl", 1),
    // 0xfa
    Disasm("ld a, (a16)", 3),
    Disasm("ei", 1),
    Disasm("#ud", 1),
    Disasm("#ud", 1),
    Disasm("cp d8", 2),
    Disasm("rst 38h", 1),
    // === CBPREFIXED ===
    // 0x0
    Disasm("rlc b", 2),
    Disasm("rlc c", 2),
    Disasm("rlc d", 2),
    Disasm("rlc e", 2),
    Disasm("rlc h", 2),
    Disasm("rlc l", 2),
    Disasm("rlc (hl)", 2),
    Disasm("rlc a", 2),
    Disasm("rrc b", 2),
    Disasm("rrc c", 2),
    // 0xa
    Disasm("rrc d", 2),
    Disasm("rrc e", 2),
    Disasm("rrc h", 2),
    Disasm("rrc l", 2),
    Disasm("rrc (hl)", 2),
    Disasm("rrc a", 2),
    Disasm("rl b", 2),
    Disasm("rl c", 2),
    Disasm("rl d", 2),
    Disasm("rl e", 2),
    // 0x14
    Disasm("rl h", 2),
    Disasm("rl l", 2),
    Disasm("rl (hl)", 2),
    Disasm("rl a", 2),
    Disasm("rr b", 2),
    Disasm("rr c", 2),
    Disasm("rr d", 2),
    Disasm("rr e", 2),
    Disasm("rr h", 2),
    Disasm("rr l", 2),
    // 0x1e
    Disasm("rr (hl)", 2),
    Disasm("rr a", 2),
    Disasm("sla b", 2),
    Disasm("sla c", 2),
    Disasm("sla d", 2),
    Disasm("sla e", 2),
    Disasm("sla h", 2),
    Disasm("sla l", 2),
    Disasm("sla (hl)", 2),
    Disasm("sla a", 2),
    // 0x28
    Disasm("sra b", 2),
    Disasm("sra c", 2),
    Disasm("sra d", 2),
    Disasm("sra e", 2),
    Disasm("sra h", 2),
    Disasm("sra l", 2),
    Disasm("sra (hl)", 2),
    Disasm("sra a", 2),
    Disasm("swap b", 2),
    Disasm("swap c", 2),
    // 0x32
    Disasm("swap d", 2),
    Disasm("swap e", 2),
    Disasm("swap h", 2),
    Disasm("swap l", 2),
    Disasm("swap (hl)", 2),
    Disasm("swap a", 2),
    Disasm("srl b", 2),
    Disasm("srl c", 2),
    Disasm("srl d", 2),
    Disasm("srl e", 2),
    // 0x3c
    Disasm("srl h", 2),
    Disasm("srl l", 2),
    Disasm("srl (hl)", 2),
    Disasm("srl a", 2),
    Disasm("bit 0, %b", 2),
    Disasm("bit 0, %c", 2),
    Disasm("bit 0, %d", 2),
    Disasm("bit 0, %e", 2),
    Disasm("bit 0, %h", 2),
    Disasm("bit 0, %l", 2),
    // 0x46
    Disasm("bit 0, (%hl)", 2),
    Disasm("bit 0, %a", 2),
    Disasm("bit 1, %b", 2),
    Disasm("bit 1, %c", 2),
    Disasm("bit 1, %d", 2),
    Disasm("bit 1, %e", 2),
    Disasm("bit 1, %h", 2),
    Disasm("bit 1, %l", 2),
    Disasm("bit 1, (%hl)", 2),
    Disasm("bit 1, %a", 2),
    // 0x50
    Disasm("bit 2, %b", 2),
    Disasm("bit 2, %c", 2),
    Disasm("bit 2, %d", 2),
    Disasm("bit 2, %e", 2),
    Disasm("bit 2, %h", 2),
    Disasm("bit 2, %l", 2),
    Disasm("bit 2, (%hl)", 2),
    Disasm("bit 2, %a", 2),
    Disasm("bit 3, %b", 2),
    Disasm("bit 3, %c", 2),
    // 0x5a
    Disasm("bit 3, %d", 2),
    Disasm("bit 3, %e", 2),
    Disasm("bit 3, %h", 2),
    Disasm("bit 3, %l", 2),
    Disasm("bit 3, (%hl)", 2),
    Disasm("bit 3, %a", 2),
    Disasm("bit 4, %b", 2),
    Disasm("bit 4, %c", 2),
    Disasm("bit 4, %d", 2),
    Disasm("bit 4, %e", 2),
    // 0x64
    Disasm("bit 4, %h", 2),
    Disasm("bit 4, %l", 2),
    Disasm("bit 4, (%hl)", 2),
    Disasm("bit 4, %a", 2),
    Disasm("bit 5, %b", 2),
    Disasm("bit 5, %c", 2),
    Disasm("bit 5, %d", 2),
    Disasm("bit 5, %e", 2),
    Disasm("bit 5, %h", 2),
    Disasm("bit 5, %l", 2),
    // 0x6e
    Disasm("bit 5, (%hl)", 2),
    Disasm("bit 5, %a", 2),
    Disasm("bit 6, %b", 2),
    Disasm("bit 6, %c", 2),
    Disasm("bit 6, %d", 2),
    Disasm("bit 6, %e", 2),
    Disasm("bit 6, %h", 2),
    Disasm("bit 6, %l", 2),
    Disasm("bit 6, (%hl)", 2),
    Disasm("bit 6, %a", 2),
    // 0x78
    Disasm("bit 7, %b", 2),
    Disasm("bit 7, %c", 2),
    Disasm("bit 7, %d", 2),
    Disasm("bit 7, %e", 2),
    Disasm("bit 7, %h", 2),
    Disasm("bit 7, %l", 2),
    Disasm("bit 7, (%hl)", 2),
    Disasm("bit 7, %a", 2),
    Disasm("res 0, %b", 2),
    Disasm("res 0, %c", 2),
    // 0x82
    Disasm("res 0, %d", 2),
    Disasm("res 0, %e", 2),
    Disasm("res 0, %h", 2),
    Disasm("res 0, %l", 2),
    Disasm("res 0, (%hl)", 2),
    Disasm("res 0, %a", 2),
    Disasm("res 1, %b", 2),
    Disasm("res 1, %c", 2),
    Disasm("res 1, %d", 2),
    Disasm("res 1, %e", 2),
    // 0x8c
    Disasm("res 1, %h", 2),
    Disasm("res 1, %l", 2),
    Disasm("res 1, (%hl)", 2),
    Disasm("res 1, %a", 2),
    Disasm("res 2, %b", 2),
    Disasm("res 2, %c", 2),
    Disasm("res 2, %d", 2),
    Disasm("res 2, %e", 2),
    Disasm("res 2, %h", 2),
    Disasm("res 2, %l", 2),
    // 0x96
    Disasm("res 2, (%hl)", 2),
    Disasm("res 2, %a", 2),
    Disasm("res 3, %b", 2),
    Disasm("res 3, %c", 2),
    Disasm("res 3, %d", 2),
    Disasm("res 3, %e", 2),
    Disasm("res 3, %h", 2),
    Disasm("res 3, %l", 2),
    Disasm("res 3, (%hl)", 2),
    Disasm("res 3, %a", 2),
    // 0xa0
    Disasm("res 4, %b", 2),
    Disasm("res 4, %c", 2),
    Disasm("res 4, %d", 2),
    Disasm("res 4, %e", 2),
    Disasm("res 4, %h", 2),
    Disasm("res 4, %l", 2),
    Disasm("res 4, (%hl)", 2),
    Disasm("res 4, %a", 2),
    Disasm("res 5, %b", 2),
    Disasm("res 5, %c", 2),
    // 0xaa
    Disasm("res 5, %d", 2),
    Disasm("res 5, %e", 2),
    Disasm("res 5, %h", 2),
    Disasm("res 5, %l", 2),
    Disasm("res 5, (%hl)", 2),
    Disasm("res 5, %a", 2),
    Disasm("res 6, %b", 2),
    Disasm("res 6, %c", 2),
    Disasm("res 6, %d", 2),
    Disasm("res 6, %e", 2),
    // 0xb4
    Disasm("res 6, %h", 2),
    Disasm("res 6, %l", 2),
    Disasm("res 6, (%hl)", 2),
    Disasm("res 6, %a", 2),
    Disasm("res 7, %b", 2),
    Disasm("res 7, %c", 2),
    Disasm("res 7, %d", 2),
    Disasm("res 7, %e", 2),
    Disasm("res 7, %h", 2),
    Disasm("res 7, %l", 2),
    // 0xbe
    Disasm("res 7, (%hl)", 2),
    Disasm("res 7, %a", 2),
    Disasm("set 0, %b", 2),
    Disasm("set 0, %c", 2),
    Disasm("set 0, %d", 2),
    Disasm("set 0, %e", 2),
    Disasm("set 0, %h", 2),
    Disasm("set 0, %l", 2),
    Disasm("set 0, (%hl)", 2),
    Disasm("set 0, %a", 2),
    // 0xc8
    Disasm("set 1, %b", 2),
    Disasm("set 1, %c", 2),
    Disasm("set 1, %d", 2),
    Disasm("set 1, %e", 2),
    Disasm("set 1, %h", 2),
    Disasm("set 1, %l", 2),
    Disasm("set 1, (%hl)", 2),
    Disasm("set 1, %a", 2),
    Disasm("set 2, %b", 2),
    Disasm("set 2, %c", 2),
    // 0xd2
    Disasm("set 2, %d", 2),
    Disasm("set 2, %e", 2),
    Disasm("set 2, %h", 2),
    Disasm("set 2, %l", 2),
    Disasm("set 2, (%hl)", 2),
    Disasm("set 2, %a", 2),
    Disasm("set 3, %b", 2),
    Disasm("set 3, %c", 2),
    Disasm("set 3, %d", 2),
    Disasm("set 3, %e", 2),
    // 0xdc
    Disasm("set 3, %h", 2),
    Disasm("set 3, %l", 2),
    Disasm("set 3, (%hl)", 2),
    Disasm("set 3, %a", 2),
    Disasm("set 4, %b", 2),
    Disasm("set 4, %c", 2),
    Disasm("set 4, %d", 2),
    Disasm("set 4, %e", 2),
    Disasm("set 4, %h", 2),
    Disasm("set 4, %l", 2),
    // 0xe6
    Disasm("set 4, (%hl)", 2),
    Disasm("set 4, %a", 2),
    Disasm("set 5, %b", 2),
    Disasm("set 5, %c", 2),
    Disasm("set 5, %d", 2),
    Disasm("set 5, %e", 2),
    Disasm("set 5, %h", 2),
    Disasm("set 5, %l", 2),
    Disasm("set 5, (%hl)", 2),
    Disasm("set 5, %a", 2),
    // 0xf0
    Disasm("set 6, %b", 2),
    Disasm("set 6, %c", 2),
    Disasm("set 6, %d", 2),
    Disasm("set 6, %e", 2),
    Disasm("set 6, %h", 2),
    Disasm("set 6, %l", 2),
    Disasm("set 6, (%hl)", 2),
    Disasm("set 6, %a", 2),
    Disasm("set 7, %b", 2),
    Disasm("set 7, %c", 2),
    // 0xfa
    Disasm("set 7, %d", 2),
    Disasm("set 7, %e", 2),
    Disasm("set 7, %h", 2),
    Disasm("set 7, %l", 2),
    Disasm("set 7, (%hl)", 2),
    Disasm("set 7, %a", 2),
];

pub fn disassmble(cpu: &Cpu, addr: u16, opcode: u8) -> String {
    let full_opcode;
    let mut pc = addr;

    if opcode == 0xcb {
        pc = pc.wrapping_add(1);
        full_opcode = (cpu.bus.fetch_byte(pc) as usize) + 0x100;
    } else {
        full_opcode = opcode as usize;
    }

    let disasm = &DISASM[full_opcode];

    let s = String::from(disasm.0);
    let s = s.replace("%af", format!("0x{:x}", cpu.get_af()).as_str());
    let s = s.replace("%bc", format!("0x{:x}", cpu.get_bc()).as_str());
    let s = s.replace("%de", format!("0x{:x}", cpu.get_de()).as_str());
    let s = s.replace("%hl", format!("0x{:x}", cpu.get_hl()).as_str());
    let s = s.replace("%pc", format!("0x{:x}", cpu.registers.pc).as_str());
    let s = s.replace("%sp", format!("0x{:x}", cpu.registers.sp).as_str());
    let s = s.replace("%a", format!("0x{:x}", cpu.registers.a).as_str());
    let s = s.replace("%f", u8::from(cpu.flags).to_string().as_str());
    let s = s.replace("%b", format!("0x{:x}", cpu.registers.b).as_str());
    let s = s.replace("%c", format!("0x{:x}", cpu.registers.c).as_str());
    let s = s.replace("%d", format!("0x{:x}", cpu.registers.d).as_str());
    let s = s.replace("%e", format!("0x{:x}", cpu.registers.e).as_str());
    let s = s.replace("%h", format!("0x{:x}", cpu.registers.h).as_str());
    let s = s.replace("%l", format!("0x{:x}", cpu.registers.l).as_str());
    let s = s.replace("d8", format!("0x{:x}", cpu.bus.fetch_byte(pc + 1)).as_str());

    let s = s.replace(
        "r8",
        format!(
            "0x{:x} ({})",
            cpu.bus.fetch_byte(pc + 1) as i8,
            cpu.bus.fetch_byte(pc + 1) as i8
        )
        .as_str(),
    );

    let s = s.replace(
        "d16",
        format!(
            "0x{:x}",
            cpu.bus.fetch_byte(cpu.registers.pc + 1) as u16
                | ((cpu.bus.fetch_byte(cpu.registers.pc + 2) as u16) << 8)
        )
        .as_str(),
    );

    let s = s.replace(
        "a16",
        format!(
            "0x{:x}",
            cpu.bus.fetch_byte(cpu.registers.pc + 1) as u16
                | ((cpu.bus.fetch_byte(cpu.registers.pc + 2) as u16) << 8)
        )
        .as_str(),
    );

    format!("{} // [{}]", s, disasm.0)
}
